import React, {useLayoutEffect} from 'react';
import MultiMenu from './MultiMenu';
import PropTypes from 'prop-types';


const DesktopMenu = ({menuRaw, colorScheme}) => {
    const [openedIndex, setOpenedIndex] = React.useState(-1);
    const [hoverIndex, setHoverIndex] = React.useState(-1);
    const [openedMenu, setOpenedMenu] = React.useState(false);
    const menuIsShown = (openedIndex != -1) && openedMenu;
    const hoverDelay = 200;
    let setHoverTimeout;

    const buildMenuTree = (nodes) => {
        const menu = new Map();
    
        nodes.forEach((node) => {
            menu.set(node, []);
        });
    
        nodes.forEach((node) => {
            if (node.parent) {
                const parent = nodes.find((parentNode) => {
                    return 'menu_link_content:' + parentNode.id === node.parent;
                });
    
                if (!parent) {
                    throw new Error('Can not find current parent');
                }
    
                const oldChild = menu.get(parent);
                const newChild = oldChild.concat([node]);
    
                menu.set(parent, newChild);
            }
        });
    
        menu.forEach((value, key) => {
            if (value.length === 0 && key.parent) {
                menu.delete(key);
            }
        });
    
        return menu;
    };

    const menu = buildMenuTree(menuRaw)

    function closeMenu() {
        setOpenedIndex(-1);
        setOpenedMenu(!openedMenu);
        clearTimeout(setHoverTimeout);
    }

    function hoverItem(value, index) {
        if (value.length) {
            setHoverTimeout = setTimeout(() => {
                setOpenedIndex(index);
                setOpenedMenu(true);
            }, hoverDelay);
        } else {
            closeMenu();
        }
    }

    function hasChildrenClass(value) {
        if (value.length) {
            return 'main-navigation-item has-children';
        } else {
            return 'main-navigation-item no-children';
        }
    }

    if (typeof window !== 'undefined') {
        window.onresize = function () {
            if (window.innerWidth < 1024 && openedMenu) {
                closeMenu();
            }
        };
    }

    useLayoutEffect(() => {
        if ('ontouchstart' in document.documentElement) {
            document.body.classList.add('touch-device');
        }

    }, [openedIndex]);

    return (
        <div className={`${colorScheme}-scheme storybook-layout`}>
            <header className='header'>
            <div className='container'>
                <div id='header-inner' className='header-inner'>
                    <a className='header-logo-link' href='/'>
                        <svg className='icon-logo-svg' width='162' height='26' viewBox='0 0 162 26' fill='none' xmlns='http://www.w3.org/2000/svg'>
                            <path d='M17.9377 6.92748H21.1142V8.60914C21.1142 14.2147 19.4325 15.8963 18.6851 16.4569C17.0035 18.1386 13.827 18.886 9.15571 18.886H5.97924V17.2043C5.97924 11.5988 7.6609 9.9171 8.4083 9.35655C10.09 7.67489 13.2664 6.92748 17.9377 6.92748ZM17.9377 0.948242C5.23183 0.948242 0 6.36693 0 17.3911V25.052H9.15571C21.8616 25.052 27.0934 19.6334 27.0934 8.60914V0.948242H17.9377Z' fill='white'/>
                            <path d='M36.0623 3.00356H39.2387V6.18003H36.0623V3.00356ZM36.0623 8.79595H39.0519V22.9966H36.0623V8.79595Z' fill='white'/>
                            <path d='M46.526 4.49846V8.79604H50.0761V11.2251H46.526V18.1386C46.526 19.0729 46.7128 19.8203 46.8997 20.194C47.2734 20.5677 47.8339 20.7545 48.5813 20.7545C48.7682 20.7545 49.1419 20.7545 49.5156 20.7545C49.8893 20.7545 50.0761 20.7545 50.263 20.5677V22.9967C50.0761 22.9967 49.7024 23.1836 49.3287 23.1836C48.955 23.1836 48.5813 23.1836 48.0208 23.1836C46.3391 23.1836 45.218 22.8099 44.4706 21.8756C43.7232 20.9414 43.3495 19.8203 43.3495 18.3255V4.49846H46.526Z' fill='white'/>
                            <path d='M53.8131 8.79599H56.8027V11.0382C57.3633 10.2908 57.9239 9.73025 58.6713 9.1697C59.4187 8.60914 60.3529 8.42229 61.2872 8.42229V11.4119C61.1003 11.4119 61.1003 11.4119 60.9135 11.4119C60.7266 11.4119 60.7266 11.4119 60.5398 11.4119C59.9792 11.4119 59.6055 11.5988 59.045 11.7856C58.6713 11.7856 58.2976 12.1593 57.9239 12.533C57.5502 12.9067 57.3633 13.2804 57.1765 13.841C56.9896 14.4015 56.8027 14.9621 56.8027 15.5226V22.8098H53.8131V8.79599Z' fill='white'/>
                            <path d='M78.6643 8.79599H81.6539V10.6645C82.2145 9.9171 82.775 9.5434 83.5225 8.98284C84.2699 8.60914 85.0173 8.42229 86.1384 8.42229C87.82 8.42229 89.128 8.98285 90.0622 9.9171C90.8096 10.8514 91.3702 12.3462 91.3702 14.2147V22.9967H88.3806V14.7752C88.3806 13.4673 88.0069 12.533 87.4463 11.9725C86.8858 11.4119 86.1384 11.0382 85.2041 11.0382C84.6436 11.0382 84.2699 11.0382 83.8962 11.2251C83.5225 11.4119 83.1487 11.5988 82.775 11.9725C82.4013 12.3462 82.2145 12.7199 82.0276 13.0936C81.8408 13.4673 81.6539 14.0278 81.6539 14.5884V22.8098H78.6643V8.79599Z' fill='white'/>
                            <path d='M108.934 3.00356H112.111V6.18003H108.934V3.00356ZM109.121 8.79595H112.111V22.9966H109.121V8.79595Z' fill='white'/>
                            <path d='M119.585 4.49846V8.79604H123.135V11.2251H119.585V18.1386C119.585 19.0729 119.772 19.8203 119.958 20.194C120.332 20.5677 120.893 20.7545 121.64 20.7545C121.827 20.7545 122.201 20.7545 122.574 20.7545C122.948 20.7545 123.135 20.7545 123.322 20.5677V22.9967C123.135 22.9967 122.761 23.1836 122.388 23.1836C122.014 23.1836 121.64 23.1836 121.08 23.1836C119.398 23.1836 118.277 22.8099 117.529 21.8756C116.782 20.9414 116.408 19.8203 116.408 18.3255V4.49846H119.585Z' fill='white'/>
                            <path d='M127.059 3.00356H130.235V6.18003H127.059V3.00356ZM127.059 8.79595H130.048V22.9966H127.059V8.79595Z' fill='white'/>
                            <path d='M133.225 14.9621C133.225 13.841 133.412 12.9067 133.785 12.1593C134.159 11.4119 134.533 10.6645 135.093 10.104C135.654 9.5434 136.401 9.16969 137.149 8.79599C137.896 8.60914 138.83 8.42229 139.765 8.42229C140.699 8.42229 141.446 8.60914 142.381 8.79599C143.128 8.98284 143.875 9.5434 144.436 10.104C144.997 10.6645 145.37 11.2251 145.744 12.1593C146.118 12.9067 146.304 14.0278 146.304 14.9621V16.6437C146.304 17.7649 146.118 18.6991 145.744 19.4465C145.37 20.1939 144.997 20.9413 144.436 21.5019C143.875 22.0624 143.128 22.4361 142.381 22.8098C141.633 22.9967 140.699 23.1835 139.765 23.1835C138.83 23.1835 138.083 22.9967 137.149 22.8098C136.401 22.623 135.654 22.0624 135.093 21.5019C134.533 20.9413 133.972 20.1939 133.785 19.4465C133.412 18.6991 133.225 17.578 133.225 16.6437V14.9621ZM136.215 16.8306C136.215 18.1386 136.588 19.0728 137.149 19.8202C137.709 20.5676 138.644 20.7545 139.578 20.7545C140.699 20.7545 141.446 20.3808 142.007 19.8202C142.567 19.0728 142.941 18.1386 142.941 16.8306V14.9621C142.941 13.6541 142.567 12.7199 142.007 11.9725C141.446 11.2251 140.512 10.8514 139.578 10.8514C138.457 10.8514 137.709 11.2251 137.149 11.9725C136.588 12.7199 136.215 13.6541 136.215 14.9621V16.8306Z' fill='white'/>
                            <path d='M149.481 8.79599H152.471V10.6645C153.031 9.9171 153.592 9.5434 154.339 8.98284C154.9 8.60914 155.834 8.42229 156.768 8.42229C158.45 8.42229 159.758 8.98285 160.692 9.9171C161.439 10.8514 162 12.3462 162 14.2147V22.9967H159.01V14.7752C159.01 13.4673 158.637 12.533 158.076 11.9725C157.516 11.4119 156.768 11.0382 155.834 11.0382C155.273 11.0382 154.9 11.0382 154.526 11.2251C154.152 11.4119 153.779 11.5988 153.405 11.9725C153.031 12.3462 152.844 12.7199 152.657 13.0936C152.471 13.4673 152.284 14.0278 152.284 14.5884V22.8098H149.481V8.79599Z' fill='white'/>
                            <path d='M105.384 16.8306C105.197 16.27 104.824 15.8963 104.45 15.5226C104.076 15.1489 103.702 14.9621 103.142 14.7752C102.581 14.5884 102.021 14.5884 101.46 14.4015L99.7786 14.2147C99.4049 14.2147 99.0312 14.2147 98.8443 14.0278C98.4706 14.0278 98.2838 13.841 98.0969 13.841C97.9101 13.6541 97.7232 13.4673 97.5364 13.2804C97.1627 13.2804 97.1627 13.0936 97.1627 12.7199C97.1627 12.1593 97.3495 11.5988 97.9101 11.4119C98.4706 11.0382 99.218 10.8514 100.152 10.8514C100.9 10.8514 101.647 11.0382 102.581 11.2251C103.142 11.4119 103.702 11.5988 104.263 11.7856L105.197 9.35655C104.637 8.98284 103.889 8.79599 102.955 8.60914C102.021 8.42229 100.9 8.42229 99.9654 8.42229C99.218 8.42229 98.4706 8.42229 97.9101 8.60914C97.1627 8.79599 96.6021 8.98284 96.0416 9.35655C95.481 9.73025 95.1073 10.104 94.7336 10.6645C94.3599 11.2251 94.1731 11.7856 94.1731 12.533C94.1731 13.2804 94.3599 14.0278 94.5468 14.4015C94.9205 15.1489 95.2942 15.5226 95.6679 15.8963C96.0416 16.27 96.6021 16.4569 96.9758 16.6437C97.5364 16.8306 98.0969 16.8306 98.6575 16.8306L100.339 17.0174C101.087 17.0174 101.834 17.2043 102.208 17.578C102.581 17.7649 102.768 18.3254 102.768 18.886C102.768 19.6334 102.395 20.0071 101.834 20.3808C101.273 20.7545 100.526 20.7545 99.5917 20.7545C98.6575 20.7545 97.7232 20.5676 96.9758 20.3808C96.4153 20.1939 95.8547 20.0071 95.2942 19.8202L94.3599 22.0624C94.7336 22.2493 95.1073 22.4361 95.481 22.4361C95.8547 22.623 96.4153 22.623 96.789 22.8098C97.1627 22.9967 97.7232 22.9967 98.0969 22.9967C98.4706 22.9967 99.0312 22.9967 99.4049 22.9967C100.152 22.9967 100.9 22.9967 101.647 22.8098C102.395 22.623 102.955 22.4361 103.702 22.0624C104.263 21.6887 104.824 21.1282 105.197 20.5676C105.571 20.0071 105.758 19.2597 105.758 18.5123C105.758 17.9517 105.571 17.3911 105.384 16.8306Z' fill='white'/>
                            <path d='M74.7405 11.5988C74.5536 10.8514 74.1799 10.2908 73.8062 9.73025C73.4325 9.35655 72.6851 8.98284 71.9377 8.79599C71.1903 8.42229 70.256 8.42229 69.1349 8.42229C68.5744 8.42229 67.0796 8.60914 66.1453 8.79599C65.2111 9.16969 64.6505 9.35655 64.0899 9.9171L64.8374 12.1593C65.2111 11.7856 65.7716 11.5988 66.1453 11.4119C66.8927 11.2251 67.6401 11.0382 68.5744 11.0382C69.3218 11.0382 69.8823 11.0382 70.4429 11.2251C70.8166 11.4119 71.1903 11.5988 71.564 11.9725C71.7508 12.3462 71.9377 12.7199 72.1245 13.0936C72.1245 13.4673 72.3114 14.0278 72.3114 14.5884V14.7752H69.1349C67.0796 14.7752 65.5848 15.1489 64.6505 15.8963C63.7162 16.6437 63.1557 17.7649 63.1557 19.2597C63.1557 20.5676 63.5294 21.5019 64.2768 22.2493C65.0242 22.9967 66.3322 23.3704 67.827 23.3704C69.6955 23.3704 71.1903 22.8098 71.9377 21.5019V22.9967H74.9273V14.2147C75.1142 13.0936 74.9273 12.3462 74.7405 11.5988ZM72.1245 17.7649C72.1245 18.5123 71.9377 18.886 71.7508 19.2597C71.564 19.6334 71.1903 20.0071 71.0034 20.1939C70.6297 20.3808 70.256 20.5676 69.8823 20.7545C69.5086 20.9413 69.1349 20.9413 68.5744 20.9413C66.8927 20.9413 66.1453 20.3808 66.1453 19.0728C66.1453 18.6991 66.1453 18.3254 66.3322 18.1386C66.519 17.9517 66.519 17.578 66.8927 17.578C67.0796 17.3911 67.4533 17.3911 67.827 17.2043C68.2007 17.2043 68.7612 17.0174 69.3218 17.0174H72.1245V17.7649Z' fill='white'/>
                        </svg>
                    </a>
                    <div className='main-navigation-desktop-view'>
                <nav className='main-navigation'>
                    {Array.from(menu).map(([key, value], index) => {
                        console.log('menu', key)
                        if (key.parent) {
                            return;
                        }
                        return (
                            <div
                                key={key.id}
                                className={hasChildrenClass(value)}
                                onMouseEnter={() => hoverItem(value, index)}
                                onMouseLeave={() => clearTimeout(setHoverTimeout)}
                                onClick={() => closeMenu()}
                            >
                                <a href={key.link.uri} className='main-navigation-link'>
                                    {key.title}
                                </a>
                            </div>
                        );
                    })}
                    <a className='main-navigation-link link-button' href='/contacts'>
            Contact us
        </a>

                    <div className={menuIsShown ? `main-navigation-menu opened opened-${openedIndex}` : 'main-navigation-menu'}>
                        <div onClick={() => closeMenu()} className='main-navigation-background' />
                        <div
                            className='main-navigation-menu-inner'
                            onMouseEnter={() => setOpenedMenu(true)}
                            onMouseLeave={() => closeMenu()}
                            onClick={() => closeMenu()}
                        >
                            <div className='header-clone'>
                                <div className='header-inner'>
                                <a href='/' className={`header-logo-link link-logo`}>
                                    <svg className='icon-logo-svg' width='162' height='26' viewBox='0 0 162 26' fill='none' xmlns='http://www.w3.org/2000/svg'>
                                        <path d='M17.9377 6.92748H21.1142V8.60914C21.1142 14.2147 19.4325 15.8963 18.6851 16.4569C17.0035 18.1386 13.827 18.886 9.15571 18.886H5.97924V17.2043C5.97924 11.5988 7.6609 9.9171 8.4083 9.35655C10.09 7.67489 13.2664 6.92748 17.9377 6.92748ZM17.9377 0.948242C5.23183 0.948242 0 6.36693 0 17.3911V25.052H9.15571C21.8616 25.052 27.0934 19.6334 27.0934 8.60914V0.948242H17.9377Z' fill='white'/>
                                        <path d='M36.0623 3.00356H39.2387V6.18003H36.0623V3.00356ZM36.0623 8.79595H39.0519V22.9966H36.0623V8.79595Z' fill='white'/>
                                        <path d='M46.526 4.49846V8.79604H50.0761V11.2251H46.526V18.1386C46.526 19.0729 46.7128 19.8203 46.8997 20.194C47.2734 20.5677 47.8339 20.7545 48.5813 20.7545C48.7682 20.7545 49.1419 20.7545 49.5156 20.7545C49.8893 20.7545 50.0761 20.7545 50.263 20.5677V22.9967C50.0761 22.9967 49.7024 23.1836 49.3287 23.1836C48.955 23.1836 48.5813 23.1836 48.0208 23.1836C46.3391 23.1836 45.218 22.8099 44.4706 21.8756C43.7232 20.9414 43.3495 19.8203 43.3495 18.3255V4.49846H46.526Z' fill='white'/>
                                        <path d='M53.8131 8.79599H56.8027V11.0382C57.3633 10.2908 57.9239 9.73025 58.6713 9.1697C59.4187 8.60914 60.3529 8.42229 61.2872 8.42229V11.4119C61.1003 11.4119 61.1003 11.4119 60.9135 11.4119C60.7266 11.4119 60.7266 11.4119 60.5398 11.4119C59.9792 11.4119 59.6055 11.5988 59.045 11.7856C58.6713 11.7856 58.2976 12.1593 57.9239 12.533C57.5502 12.9067 57.3633 13.2804 57.1765 13.841C56.9896 14.4015 56.8027 14.9621 56.8027 15.5226V22.8098H53.8131V8.79599Z' fill='white'/>
                                        <path d='M78.6643 8.79599H81.6539V10.6645C82.2145 9.9171 82.775 9.5434 83.5225 8.98284C84.2699 8.60914 85.0173 8.42229 86.1384 8.42229C87.82 8.42229 89.128 8.98285 90.0622 9.9171C90.8096 10.8514 91.3702 12.3462 91.3702 14.2147V22.9967H88.3806V14.7752C88.3806 13.4673 88.0069 12.533 87.4463 11.9725C86.8858 11.4119 86.1384 11.0382 85.2041 11.0382C84.6436 11.0382 84.2699 11.0382 83.8962 11.2251C83.5225 11.4119 83.1487 11.5988 82.775 11.9725C82.4013 12.3462 82.2145 12.7199 82.0276 13.0936C81.8408 13.4673 81.6539 14.0278 81.6539 14.5884V22.8098H78.6643V8.79599Z' fill='white'/>
                                        <path d='M108.934 3.00356H112.111V6.18003H108.934V3.00356ZM109.121 8.79595H112.111V22.9966H109.121V8.79595Z' fill='white'/>
                                        <path d='M119.585 4.49846V8.79604H123.135V11.2251H119.585V18.1386C119.585 19.0729 119.772 19.8203 119.958 20.194C120.332 20.5677 120.893 20.7545 121.64 20.7545C121.827 20.7545 122.201 20.7545 122.574 20.7545C122.948 20.7545 123.135 20.7545 123.322 20.5677V22.9967C123.135 22.9967 122.761 23.1836 122.388 23.1836C122.014 23.1836 121.64 23.1836 121.08 23.1836C119.398 23.1836 118.277 22.8099 117.529 21.8756C116.782 20.9414 116.408 19.8203 116.408 18.3255V4.49846H119.585Z' fill='white'/>
                                        <path d='M127.059 3.00356H130.235V6.18003H127.059V3.00356ZM127.059 8.79595H130.048V22.9966H127.059V8.79595Z' fill='white'/>
                                        <path d='M133.225 14.9621C133.225 13.841 133.412 12.9067 133.785 12.1593C134.159 11.4119 134.533 10.6645 135.093 10.104C135.654 9.5434 136.401 9.16969 137.149 8.79599C137.896 8.60914 138.83 8.42229 139.765 8.42229C140.699 8.42229 141.446 8.60914 142.381 8.79599C143.128 8.98284 143.875 9.5434 144.436 10.104C144.997 10.6645 145.37 11.2251 145.744 12.1593C146.118 12.9067 146.304 14.0278 146.304 14.9621V16.6437C146.304 17.7649 146.118 18.6991 145.744 19.4465C145.37 20.1939 144.997 20.9413 144.436 21.5019C143.875 22.0624 143.128 22.4361 142.381 22.8098C141.633 22.9967 140.699 23.1835 139.765 23.1835C138.83 23.1835 138.083 22.9967 137.149 22.8098C136.401 22.623 135.654 22.0624 135.093 21.5019C134.533 20.9413 133.972 20.1939 133.785 19.4465C133.412 18.6991 133.225 17.578 133.225 16.6437V14.9621ZM136.215 16.8306C136.215 18.1386 136.588 19.0728 137.149 19.8202C137.709 20.5676 138.644 20.7545 139.578 20.7545C140.699 20.7545 141.446 20.3808 142.007 19.8202C142.567 19.0728 142.941 18.1386 142.941 16.8306V14.9621C142.941 13.6541 142.567 12.7199 142.007 11.9725C141.446 11.2251 140.512 10.8514 139.578 10.8514C138.457 10.8514 137.709 11.2251 137.149 11.9725C136.588 12.7199 136.215 13.6541 136.215 14.9621V16.8306Z' fill='white'/>
                                        <path d='M149.481 8.79599H152.471V10.6645C153.031 9.9171 153.592 9.5434 154.339 8.98284C154.9 8.60914 155.834 8.42229 156.768 8.42229C158.45 8.42229 159.758 8.98285 160.692 9.9171C161.439 10.8514 162 12.3462 162 14.2147V22.9967H159.01V14.7752C159.01 13.4673 158.637 12.533 158.076 11.9725C157.516 11.4119 156.768 11.0382 155.834 11.0382C155.273 11.0382 154.9 11.0382 154.526 11.2251C154.152 11.4119 153.779 11.5988 153.405 11.9725C153.031 12.3462 152.844 12.7199 152.657 13.0936C152.471 13.4673 152.284 14.0278 152.284 14.5884V22.8098H149.481V8.79599Z' fill='white'/>
                                        <path d='M105.384 16.8306C105.197 16.27 104.824 15.8963 104.45 15.5226C104.076 15.1489 103.702 14.9621 103.142 14.7752C102.581 14.5884 102.021 14.5884 101.46 14.4015L99.7786 14.2147C99.4049 14.2147 99.0312 14.2147 98.8443 14.0278C98.4706 14.0278 98.2838 13.841 98.0969 13.841C97.9101 13.6541 97.7232 13.4673 97.5364 13.2804C97.1627 13.2804 97.1627 13.0936 97.1627 12.7199C97.1627 12.1593 97.3495 11.5988 97.9101 11.4119C98.4706 11.0382 99.218 10.8514 100.152 10.8514C100.9 10.8514 101.647 11.0382 102.581 11.2251C103.142 11.4119 103.702 11.5988 104.263 11.7856L105.197 9.35655C104.637 8.98284 103.889 8.79599 102.955 8.60914C102.021 8.42229 100.9 8.42229 99.9654 8.42229C99.218 8.42229 98.4706 8.42229 97.9101 8.60914C97.1627 8.79599 96.6021 8.98284 96.0416 9.35655C95.481 9.73025 95.1073 10.104 94.7336 10.6645C94.3599 11.2251 94.1731 11.7856 94.1731 12.533C94.1731 13.2804 94.3599 14.0278 94.5468 14.4015C94.9205 15.1489 95.2942 15.5226 95.6679 15.8963C96.0416 16.27 96.6021 16.4569 96.9758 16.6437C97.5364 16.8306 98.0969 16.8306 98.6575 16.8306L100.339 17.0174C101.087 17.0174 101.834 17.2043 102.208 17.578C102.581 17.7649 102.768 18.3254 102.768 18.886C102.768 19.6334 102.395 20.0071 101.834 20.3808C101.273 20.7545 100.526 20.7545 99.5917 20.7545C98.6575 20.7545 97.7232 20.5676 96.9758 20.3808C96.4153 20.1939 95.8547 20.0071 95.2942 19.8202L94.3599 22.0624C94.7336 22.2493 95.1073 22.4361 95.481 22.4361C95.8547 22.623 96.4153 22.623 96.789 22.8098C97.1627 22.9967 97.7232 22.9967 98.0969 22.9967C98.4706 22.9967 99.0312 22.9967 99.4049 22.9967C100.152 22.9967 100.9 22.9967 101.647 22.8098C102.395 22.623 102.955 22.4361 103.702 22.0624C104.263 21.6887 104.824 21.1282 105.197 20.5676C105.571 20.0071 105.758 19.2597 105.758 18.5123C105.758 17.9517 105.571 17.3911 105.384 16.8306Z' fill='white'/>
                                        <path d='M74.7405 11.5988C74.5536 10.8514 74.1799 10.2908 73.8062 9.73025C73.4325 9.35655 72.6851 8.98284 71.9377 8.79599C71.1903 8.42229 70.256 8.42229 69.1349 8.42229C68.5744 8.42229 67.0796 8.60914 66.1453 8.79599C65.2111 9.16969 64.6505 9.35655 64.0899 9.9171L64.8374 12.1593C65.2111 11.7856 65.7716 11.5988 66.1453 11.4119C66.8927 11.2251 67.6401 11.0382 68.5744 11.0382C69.3218 11.0382 69.8823 11.0382 70.4429 11.2251C70.8166 11.4119 71.1903 11.5988 71.564 11.9725C71.7508 12.3462 71.9377 12.7199 72.1245 13.0936C72.1245 13.4673 72.3114 14.0278 72.3114 14.5884V14.7752H69.1349C67.0796 14.7752 65.5848 15.1489 64.6505 15.8963C63.7162 16.6437 63.1557 17.7649 63.1557 19.2597C63.1557 20.5676 63.5294 21.5019 64.2768 22.2493C65.0242 22.9967 66.3322 23.3704 67.827 23.3704C69.6955 23.3704 71.1903 22.8098 71.9377 21.5019V22.9967H74.9273V14.2147C75.1142 13.0936 74.9273 12.3462 74.7405 11.5988ZM72.1245 17.7649C72.1245 18.5123 71.9377 18.886 71.7508 19.2597C71.564 19.6334 71.1903 20.0071 71.0034 20.1939C70.6297 20.3808 70.256 20.5676 69.8823 20.7545C69.5086 20.9413 69.1349 20.9413 68.5744 20.9413C66.8927 20.9413 66.1453 20.3808 66.1453 19.0728C66.1453 18.6991 66.1453 18.3254 66.3322 18.1386C66.519 17.9517 66.519 17.578 66.8927 17.578C67.0796 17.3911 67.4533 17.3911 67.827 17.2043C68.2007 17.2043 68.7612 17.0174 69.3218 17.0174H72.1245V17.7649Z' fill='white'/>
                                    </svg>
                                </a>
                                    <nav className='main-navigation'>
                                        {Array.from(menu).map(([key, value], index) => {
                                            const isOpen = openedIndex === index;
                                            const linkClass = isOpen ?
                                                'main-navigation-link active' :
                                                'main-navigation-link';

                                            if (key.parent) {
                                                return;
                                            }
                                            return (
                                                <div
                                                    key={key.id}
                                                    className={hasChildrenClass(value)}
                                                    onMouseEnter={() => hoverItem(value, index)}
                                                >
                                                    <a href={key.link.uri} className={linkClass}>
                                                        {key.title}
                                                    </a>
                                                    <div className='main-navigation-menu-single'>
                                                        {value.map((item, index) => {
                                                            if (!menu.has(item)) {
                                                                return (
                                                                    <a
                                                                        key={item.id}
                                                                        href={item.link.uri}
                                                                        className='link'
                                                                        onMouseEnter={() => setHoverIndex(index)}
                                                                        onMouseLeave={() => setHoverIndex(-1)}
                                                                        onClick={() =>  closeMenu()}
                                                                    >
                                                                        {item.title}
                                                                    </a>
                                                                );
                                                            }
                                                        })}
                                                    </div>
                                                </div>
                                            );
                                        })}
                                        <a className='main-navigation-link link-button' href='/contacts'>
                                            Contact us
                                        </a>
                                    </nav>
                                </div>

                                <div className={`active-${openedIndex}`}>
                                    {Array.from(menu).map(([key, value], index) => {
                                        const menuImage = key.relationships.field_image;
                                        const isOpen = openedIndex === index;
                                        const itemClass = isOpen ?
                                            'main-navigation-menu-item active' :
                                            'main-navigation-menu-item';

                                        if (key.parent) {
                                            return;
                                        }
                                        return (
                                            <div key={key.id} className={itemClass}>
                                                <div className='item-image'>
                                                    {menuImage &&
                                                        <div className='gatsby-image-wrapper clear-top-padding image'>
                                                            <img src={menuImage}/>
                                                        </div>
                                                    }
                                                    <div className='image-gradient' />
                                                </div>
                                                {value.map((item, index) => {
                                                    if (!menu.has(item)) {
                                                        const subMenuImage = item.relationships.field_image;
                                                        const isHover = hoverIndex === index;
                                                        const imageClass = isHover ?
                                                            'sub-item-image active' :
                                                            'sub-item-image';

                                                        return (
                                                            <div key={item.id} className={imageClass}>
                                                                {subMenuImage &&
                                                                    <div className='gatsby-image-wrapper clear-top-padding image'>
                                                                        <img src={subMenuImage}/>
                                                                    </div>
                                                                }
                                                                <div className='image-gradient' />
                                                            </div>
                                                        );

                                                    } else {
                                                        return <div key={item.id} className='multi-menu-item'>
                                                            <MultiMenu item={item} menu={menu}/>
                                                        </div>;
                                                    }
                                                })}
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                        </div>
                    </div>
                </nav>
            </div>
                </div>
            </div>
        </header>
            
        </div>
    );
};

export default DesktopMenu;

DesktopMenu.propTypes = {
    menuRaw: PropTypes.array,
    colorScheme: PropTypes.string,
}

DesktopMenu.defaultProps = {
    menuRaw: [],
    colorScheme: 'primary',
}
